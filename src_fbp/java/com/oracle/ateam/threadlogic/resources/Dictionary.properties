# Standard Tags/Invocation Patterns to look for....
# KEYWORD = Pattern Name | Short Description | Health Level | Advice

#JVM
Finalizer.doFinalize=Finalizer Thread Blocked|Finalizer Thread Blocked|FATAL|Check if the Finalizer Thread is blocked for a lock which will lead to wasted memory waiting to be reclaimed from Finalizer Queue
SocketImpl.socketConnect=Socket Connection to unreachable endpoint|Opening a socket connect|WARNING|Check if remote service is up or accepting connections or endpoint/url is wrongly defined as the socket connection establishment should be quick and fast.
ParallelGCThreads=Large # of Paralllel GC Threads|Large number of Parallel GC Threads used by JVM|WARNING|Reduce number of Parallel GC Threads (under 20), based on number of CPU/Cores and JVMs running on the host machine
SocketInputStream.socketRead=Socket Read|Socket read|WATCH|Check for slowness/network outage/firewall socket drops if these sockets are to DB or External/Remote Services (not usual housekeeping services)
SocketOutputStream.write=Socket Write|Socket Write|WATCH|Check for slowness/network outage/firewall drops sockets if these sockets are to DB or External/Remote Services or other cluster members (ignore for DB Pollers or Http Servlet threads)
SecureRandom.generateSeed=Random Number Seed generation Slow|Slow in generating Random Seed Number for security|WARNING|Use -Djava.security.egd=file:/dev/./urandom in non-Production Environment
SelectorImpl.select=Native Select Poller|Poller Thread doing Native Select for socket events|NORMAL|Poller Thread
FileInputStream.read=File Read|Thread doing File Read|WATCH|Check for slowness if pattern continues
UnixFileSystem.getBooleanAttributes=Get Attributes of file from File System|Thread getting file attributes from file system|WATCH|Check for disk slowness or problem with file system (NFS) if pattern continues
ReentrantLock.lock=Trying to acquire Reentrant Lock|Thread attempting to acquire java concurrent Reentrant Lock|WATCH|Treat it as blocked thread; Check if the thread continues in Parked state or acquired the lock; Use -XX:+PrintConcurrentLocks to print the details of who might be holding but not releasing the Reentrant Lock


#JRockit 
Allocator.nativeGetNewTLA=JRockit allocating new Memory|JRockit VM is trying to allocate memory|WATCH|Allocate more heap/memory, watch more closely for OOM/insufficient memory if pattern occurs in multiple threads or thread dumps

#JDBC
Statement.executeQuery=Database Query Execution|Executing Query on DB|WATCH|Check/Monitor on Database SQL Executions if it takes longer and also check for socket connection disruption to DB if thread continues to show same pattern
PreparedStatement.execute=Database Query Execution|Executing operation on DB|WATCH|Check/Monitor Database SQL Executions if it takes longer and also check for socket connection disruption to database if thread continues to show same pattern
oracle.jdbc.driver.T4CConnection.connect=Oracle JDBC Connection Creation|Oracle JDBC Connection creation|WARNING|Ensure JDBC Connections are created and pooled and does not get recreated newly each time under load (if the pool size was small and its growing, then its okay, would be advisable to set the initial pool capacity to a larger size at cost of startup time)


#Servlet
HttpServlet.service=Web Application Request|Servlet Request|NORMAL|Normal Servlet call
#ServletRequestImpl.run=Web Application Request|Servlet Request|NORMAL|Normal Servlet call

###############################################################################################################

#Generic Patterns
STUCK=Stuck Thread|Thread is Stuck, request taking very long time to finish|FATAL|Check why the thread or call is taking very long?? Is it blocked for unavailable or bad resource or contending for Lock? Can be ignored if it is doing repeat work in a loop (like adapter threads polling for events in a infinite loop)...
DEADLOCK=Circular Deadlock Condition|Circular Lock Dependency Detected leading to Deadlock|FATAL|Deadlock detected with circular dependency in locks, blocked threads will not recover without Server Restart; Fix the order of locking and or try to avoid locks or change order of locking at code level, Report with SR for Server/Product Code
lang.Thread.start=Thread Creation|Creation of new Thread|WATCH|Check why and who is spawning off new threads, use WorkManager/ThreadPool for reusing threads more efficiently
SocketImpl.socketAccept=Listener|Socket Listener waiting on accept|IGNORE|Ignore
sun.nio.ch.SelectorImpl.select=NIO Select|Using Native IO via Select or Poll|IGNORE|Ignore
BlockedThreads=Bottleneck among threads|High Contention for Locks among threads creating a performance bottleneck|WARNING|Check and avoid contention in locks, modify code or conditions (Debugs possibly turned on), increase the number of contented resources via increased pool size/caching
ContentionForUnownedLock=Bottleneck among threads|High Contention for unowned Locks|WARNING|Check and avoid (even if short lived) contention for locks, modify code or conditions (Debugs possibly turned on), increase the number of resources under contention via increased pool size/caching or avoid the call pattern/optimize the call.
HotCallPattern=Hot Spots|Multiple Threads executing same code path|WARNING|Ensure there are no blocking locks or bottlenecks, sufficient resources are available,remote service being invoked is responsive and scaling well to handle increased load
WaitWhileBlockingPattern=Waiting for Event while blocking others|Multiple Threads blocking for a Lock while Lock Owner is waiting for an Event|FATAL|Ensure the owner thread is not waiting forever for an Event; if the desired Event never occurs, the lock will never get released and the blockers will be stuck in the same state forever.
WebLayerBlocked=Web Application Bottleneck|Web Application is waiting for an Event|WARNING|Web Application should not go into WAIT state as it means the end user would have to wait for indeterminate time for a synchronous response, change the code or logic to return the results or response right away instead of blocking or waiting for an event.											

###############################################################################################################

#WLS Server
T3Srvr.shutdown=WLS Server Shutdown|WLS Server shutting down|WATCH|Check if the server is shutting down due to user activity or due to failures (OOM/Error conditions)
GenericClassLoader.loadClass=WLS Classloading|WLS Classloader loading classes|WATCH|Check for excessive or repeated classloading if it occurs even after server has been up and running for sometime.
ExecuteThread.waitForRequest=WLS Idle Thread|WebLogic Idle Thread waiting for new request|IGNORE|Ignore - its an idle thread waiting for a new request to execute
WLSSubsystemRequestOverflow=WLS Muxer is processing server requests|WLS Muxer is handling subsystem requests|FATAL|WLS Server health is unhealthy as some subsystems are overwhelmed with requests which is leading to the Muxer threads directly handling requests instead of dispatching to relevant subsystems.  There is likely a bug here.

#WLS JTA
TransactionManagerImpl.commit=Transaction commit|Server committing Transaction|NORMAL|Normal Commit as long as there are no rollbacks
ServerTransactionImpl.globalRollback=Transaction rollback|Server rolling back Transaction|WATCH|Check why there is rollback happening from the server logs - Are resources not ready/unhealthy/disrupted/connectivity issues??

#WLS Muxer
SocketMuxer.deliverEndOfStream=EOF Exception in socket read|WLS Muxer got an abrupt End of Stream while reading from a Socket|WARNING|Check for connection disruptions between Server and Client (or other server instances)
MuxerWaiting=WLS Muxer in Wait or Parking Condition|WLS Muxer waiting for or parked for event/condition|FATAL|WLS Muxer is unhealthy and should not wait for a event/condition.  One muxer thread should be running (typically in poll) while holding a lock and the other threads waiting to get the lock.  There is likely a bug here.
WebLogicMuxerThreads=Large # of WLS Muxer Threads|Large number of WLS Muxer Threads|WATCH|Reduce number of WLS Muxer Threads to under 4, use -Dweblogic.SocketReaders=NoOfThreads flag in command line
SocketMuxer.processSockets=WLS Muxer normal execution|WebLogic Muxer Thread blocked or handling sockets|NORMAL|Check if its doing blocked for non-Muxer related locks or only doing routine polling as part of processSockets() call
ConnectionManager.dispatch=Handle new Request|Dispatching a new request for execution|NORMAL|Check if request is getting executed or blocked waiting for a resource
JavaSocketMuxer.processSockets=WLS Java Socket Muxer|WLS is using JavaSocketMuxer instead of Native Socket Muxer, should be avoided for server side|WARNING|If thread dump is from a running WLS Server, Server should use the Native Socket Muxer Performance Pack instead of using the JavaSocketMuxer; Ensure the $LD_LIBRARY_PATH or $SHLIB_PATH or %PATH% includes the path to the native libraries

#WLS Deployment
DeploymentUtils.getApplicationStatusString=Console checking Application Deployment status|Console getting Deployment status of application|NORMAL|Check state of Managed servers if pattern continues (or possibly large number of managed servers and apps)
BasicDeployment.unprepare=WLS App undeployment|WLS undeploying application|WATCH|Application is getting undeployed on server

#WLS RMI
ResponseImpl.waitForData=Wait for RMI Response|Waiting for Remote WLS Server response|NORMAL|Normal behavior, blocked for remote rmi response
PeerGoneException=Remote Server Disconnection|Remote Server disconnected|WARNING|Remote Server or client disconnected abruptly, diagnose why from errors/network level

#WLS Cluster
MulticastFragmentSocket.receive=WLS Multicast Receive|WLS Multicast Announcement Receiver|IGNORE|Ignore
MessageReceiverRunning=Cluster MessageReceiver Thread|Cluster MessageReceiver Thread|WATCH|This thread should be very quick in processing and scheduling appropriate work. If this thread continues to be RUNNING across thread dumps, there is likely a bug somewhere.

#WLS SLSB
StatelessSessionPool.waitForBean=Wait for SLSB Beans|Waiting for Stateless Session Bean (SLSB) instance from the SLSB Free pool|FATAL|Beans all in use, free pool size size insufficient

# WLS JNDI Lookups
WLInitialContextFactory.getInitialContext=WLS Initial Context Creation|WLS Initial Context Creation|WARNING|JNDI Context should be cached, repeat calls can degrade performance if context is not cached
WLContextImpl.lookup=WLS JNDI Lookup|WLS JNDI Lookup|WARNING|JNDI Objects should be cached (along with Contexts) to avoid repeated calls especially when the resource is remote and not-local. This can result in degraded performance for repeat calls.

#WLS JMS
MessageHandle.setPagingInProgress=WLS JMS Paging|WebLogic JMS paging messages to disk|FATAL|WLS has started paging messages to disk as consumers cannot keep up with producers and messages have started accumulating; Increase, speed or tune consumers or Introduce flow controls/quotas to slow down producers and Inflow rates. Or Increase number of servers to spread the load.
JMSSession.receiveMessage=Wait for JMS Messages|Wait for JMS messages|NORMAL|Normal Behavior for JMS Consumer
JMSProducer.send=Publish JMS Messages|Publish JMS messages|NORMAL|Normal Behavior for JMS Producer
weblogic.messaging.kernel.internal.QueueImpl.receive=WLS JMS Msg Receive|WLS receiving incoming JMS Message|NORMAL|Normal behavior
weblogic.jms.client.JMSProducer.send=WLS JMS Msg Producer|WLS Producer client sending JMS Message|NORMAL|Normal behavior
MessagingBridge.processMessages=WLS Messaging Bridge|WLS Message Bridge processing jms messages|NORMAL|Normal behavior
weblogic.messaging.common.SQLFilter.match=WLS JMS Message Filtering|WLS JMS Message Filtering via Selectors|WARNING|Selectors can slow down performance if the filter uses message body or complex expressions for selecting messages and leading to slow down in message consumption and bottleneck among consumers as the Queue has to be locked while running the selectors; try to split the queue into multiple separate queues if possible to improve throughput and reduce contention among consumers.
WLSJMSQueueBottleneck=WLS JMS Queue Contention|Contention for WLS JMS Queue|WARNING|Multiple threads are blocked trying to get lock on the WLS JMS Queue, impeding production or consumption of messages till the lock gets relinquished. This can happen if thee are selectors holding lock on the queue or there are other changes to the queue itself. Check the thread owning lock on the Queue.
JMSConsumer.receiveNoWait=WLS Synchronous JMS Receiver|WLS Synchronous JMS Receiver|WARNING|Use Asynchronous JMS Receivers over Synchronous Receivers (register as MessageListener) as async model scales well

#WLS JDBC
ConnectionPool.reserve=Reserve JDBC Connection from Pool|Reserving JDBC Connection from Pool|WATCH|Check the outcome of Connection reserve in a subsequent thread dump or stack trace of the reserve() call
ConnectionEnv.testInternal=Test health of JDBC Connection|Testing JDBC Connection from Pool|WATCH|Check the outcome of Connection testing in a subsequent thread dump or stack trace of the testInternal() call
ConnectionPool.shutdown=JDBC Connection Pool shutting down|JDBC Connection Pool shutting down|WARNING|JDBC Connection Pool is being shutdown, ensure its due to user action and not due to failure conditions

###############################################################################################################
#OSB
HttpTransportServlet.service=OSB HTTP Proxy|OSB HTTP Proxy Execution|NORMAL|Normal OSB Proxy Service inbound call
WsCalloutRuntimeStep.processMessage=OSB WebService Callout|OSB WebService Callout Execution|NORMAL|OSB WebService outbound call
com.bea.wli.config.transaction.TransactionManager=OSB Session Activation|OSB Session activation in progress or committing|WATCH|OSB Configuration is being updated via an active session, ensure the activation goes through and the thread does not reach blocked state

#SOA HTTP Client
HTTPResponse.handleResponse=HTTP Response Read|Reading Http Response|NORMAL|Check for slowness in remote service if pattern continues
HttpSOAPConnection.post=SOAP outbound calls from SOA|SOA Layer making HTTP SOAP Outbound call|NORMAL|Check for slowness in remote webservice if pattern continues

#B2B
oracle.tip.b2b.engine.ThreadWorkExecutor=B2B Thread Executor|B2B Thread Executor|NORMAL|B2B Custom Thread Pool Executor thread

###############################################################################################################

#LDAP
LDAPConnThread.run=LDAP Connection|LDAP Connection Thread|NORMAL|Ignore if doing default socket reads

###############################################################################################################
#Coherence
coherence.component.util.Daemon.onWait=Coherence Dameon Thread in wait|Coherence Daemon Thread Waiting|IGNORE|Ignore

###############################################################################################################
#Tibco EMS
TibjmsMessageConsumer.receive=Tibco EMS Message Consumer|Tibco EMS Message Consumer|NORMAL|Normal behavior
TibjmsxLinkTcp.LinkReader.run=Tibco EMS Message Listener Thread|Tibco EMS Message Listener Thread|NORMAL|Normal behavior

###############################################################################################################

#iWAY
afjca15.AbstractResourceAdapter.endpointDeactivation=IWay Adapter Endpoint Deactivation|IWay Adapter Endpoint Deactivation invoked|WATCH|IWay Adapter endpoint is getting deactivated, there would be service disruption, ensure the call completes by checking in successive thread dumps

###############################################################################################################

#Diagnostic tools
com.mercury.diagnostics=Mercury Diagnostics|Mercury Diagnostics instrumentation enabled|NORMAL|Mercury Diagnostics instrumentation has been enabled, just ensure its does not consume too much memory nor instruments heavily to slow down performance
com.wily=Wily Instrumentation|Wily Instrumentation enabled|NORMAL|Wily code instrumentation has been enabled, just ensure its does not consume too much memory nor instruments heavily to slow down performance


###############################################################################################################